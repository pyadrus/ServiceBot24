import datetime  # –î–∞—Ç–∞
import sqlite3

from aiogram import F
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from loguru import logger

from keyboards.user_keyboards import greeting_keyboards  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
from messages.user_messages import greeting_post, message_text_faq  # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FAG
from system.dispatcher import dp, bot, ADMIN_CHAT_ID  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class SomeState(StatesGroup):
    some_state = State()  # –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.message(Command('start'))
async def greeting(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await state.clear()
    # await state.reset_state()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('setting/user_data.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users_run (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, 
                                                        first_name TEXT, last_name TEXT, username TEXT, date TEXT)''')
    cursor.execute('''INSERT INTO users_run (user_id, first_name, last_name, username, date) VALUES (?, ?, ?, ?, ?)''',
                   (message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                    message.from_user.username, current_date))
    conn.commit()
    print(f'–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞: {message.from_user.id, message.from_user.username, current_date}')
    keyboards_greeting = greeting_keyboards()
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ü–µ–Ω –∏–ª–∏ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await message.answer(
        text=greeting_post,
        reply_markup=keyboards_greeting,
        disable_web_page_preview=True,
        # parse_mode=types.ParseMode.HTML
    )


def checking_for_presence_in_the_user_database(user_id):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('setting/user_data.db')
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY)')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    return result


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('setting/user_data.db')
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY)')


@dp.message(Command('id'))
async def process_id_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id"""
    try:
        user_id = int(message.text.split()[1])
        # –ó–∞–ø–∏—Å—å ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = checking_for_presence_in_the_user_database(user_id)
        if result is None:
            cursor.execute('INSERT INTO users (id) VALUES (?)', (user_id,))
            conn.commit()
            await message.reply(f"ID {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.reply(f"ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id followed by –≤–∞—à ID.")
    except Exception as error:
        logger.exception(error)


@dp.callback_query(F.data == "get_password")
async def get_password(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_password –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} {callback.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª / –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –ø–∞—Ä–æ–ª—å '
                    f'–æ—Ç TelegramMaster')
        logger.info(callback.from_user.id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await bot.get_chat_member(chat_id="@master_tg_d", user_id=callback.from_user.id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        logger.info(f"User Status: {user.status}")
        if user.status in ['member', 'administrator', 'creator']:
            result = checking_for_presence_in_the_user_database(callback.from_user.id)
            if result:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –∏–º–µ–µ—Ç ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º
                document = FSInputFile('setting/password/Telegram_SMM_BOT/password.txt')
                await bot.send_document(chat_id=callback.message.chat.id, document=document)
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                                   f"ID {callback.from_user.id},\n"
                                                                   f"Username: @{callback.from_user.username},\n"
                                                                   f"–ò–º—è: {callback.from_user.first_name},\n"
                                                                   f"–§–∞–º–∏–ª–∏—è: {callback.from_user.last_name},\n"
                                                                   f"–ó–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç TelegramMaster")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            else:
                text = (
                    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ ü§ñ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª "
                    "üîó @master_tg_d –∏ –∫—É–ø–∏—Ç—å TelegramMaster.\n\n"

                    "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é TelegramMaster –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ "
                    "—Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"

                    "–ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ TelegramMaster, –Ω–æ –±–æ—Ç ü§ñ –Ω–µ –≤—ã–¥–∞—ë—Ç –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ "
                    "üîó @h24service_bot.")
                await bot.send_message(chat_id=callback.message.chat.id, text=text)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                                   f"ID {callback.from_user.id},\n"
                                                                   f"Username: @{callback.from_user.username},\n"
                                                                   f"–ò–º—è: {callback.from_user.first_name},\n"
                                                                   f"–§–∞–º–∏–ª–∏—è: {callback.from_user.last_name},\n"
                                                                   f"–ó–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç TelegramMaster")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        else:
            text = ("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ ü§ñ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª "
                    "üîó @master_tg_d –∏ –∫—É–ø–∏—Ç—å TelegramMaster.\n\n"

                    "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é TelegramMaster –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ "
                    "—Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"

                    "–ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ TelegramMaster, –Ω–æ –±–æ—Ç ü§ñ –Ω–µ –≤—ã–¥–∞—ë—Ç –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ "
                    "üîó @h24service_bot.")
            await bot.send_message(chat_id=callback.message.chat.id, text=text)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                                   f"ID {callback.from_user.id},\n"
                                                                   f"Username: @{callback.from_user.username},\n"
                                                                   f"–ò–º—è: {callback.from_user.first_name},\n"
                                                                   f"–§–∞–º–∏–ª–∏—è: {callback.from_user.last_name},\n"
                                                                   f"–ó–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç TelegramMaster")   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    except Exception as e:
        logger.error(e)


@dp.callback_query(F.data == "get_password_tg_com")
async def get_password_tg_com(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª, –±–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º, —Å—Å—ã–ª–∫–∞ –≤ –≤–∏–¥–µ: @master_tg_d"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} {callback.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª / –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –ø–∞—Ä–æ–ª—å '
                f'–æ—Ç Telegram_Commentator_GPT')
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await bot.get_chat_member(chat_id="@master_tg_d", user_id=callback.from_user.id)
    if user.status in ['member', 'administrator', 'creator']:
        document = FSInputFile('setting/password/Telegram_Commentator_GPT/password.txt')
        await bot.send_document(chat_id=callback.message.chat.id, document=document)
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                           f"ID {callback.from_user.id},\n"
                                                           f"Username: @{callback.from_user.username},\n"
                                                           f"–ò–º—è: {callback.from_user.first_name},\n"
                                                           f"–§–∞–º–∏–ª–∏—è: {callback.from_user.last_name},\n"
                                                           f"–ó–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç Telegram_Commentator_GPT")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
        await bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @master_tg_d –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                           f"ID {callback.from_user.id},\n"
                                                           f"Username: @{callback.from_user.username},\n"
                                                           f"–ò–º—è: {callback.from_user.first_name},\n"
                                                           f"–§–∞–º–∏–ª–∏—è: {callback.from_user.last_name},\n"
                                                           f"–ó–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –æ—Ç Telegram_Commentator_GPT")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


@dp.callback_query(F.data == "sending_file")
async def sending_file_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "sending_file"""
    # user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞ (–ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–∂–∏–¥–∞—è —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(SomeState.some_state)


router = Router()


@router.message(StateFilter(SomeState.some_state), F.photo, F.document, F.video)
async def handle_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "some_state"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–∞–π–ª–æ–≤–æ–π ID
    # user_id = message.from_user.id
    file_id = None
    if message.document:
        file_id = message.document.file_id
    elif message.photo:
        file_id = message.photo[-1].file_id
    elif message.video:
        file_id = message.video.file_id
    if file_id:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –µ–≥–æ file_id
        admin_chat_id = ADMIN_CHAT_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_document(admin_chat_id, document=file_id)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await message.reply("–í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.callback_query(F.data == "reference")
async def faq_handler(callback_query: types.CallbackQuery):
    """–ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FAG"""
    # disable_web_page_preview=True - —Å–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –≤ Telegram
    await bot.send_message(callback_query.from_user.id, message_text_faq, disable_web_page_preview=True)


def greeting_handler():
    dp.message.register(greeting)
    dp.message.register(get_password)
    dp.message.register(process_id_command)
