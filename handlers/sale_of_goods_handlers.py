import datetime  # –î–∞—Ç–∞
import json
import sqlite3

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é loguru
from yookassa import Configuration, Payment

from handlers.user_handlers.user_handlers import checking_for_presence_in_the_user_database
from keyboards.user_keyboards import payment_keyboard
from system.dispatcher import bot, dp, ACCOUNT_ID, SECRET_KEY, ADMIN_CHAT_ID


class PaymentStates:  # Define your FSM states if needed
    PROCESSING = "processing"


def payment_yookassa():
    """–û–ø–ª–∞—Ç–∞ –Æ–∫–∞—Å—Å–∞"""

    Configuration.account_id = ACCOUNT_ID
    Configuration.secret_key = SECRET_KEY

    payment = Payment.create(
        {"amount": {"value": 1.00, "currency": "RUB"}, "capture": True,
         "confirmation": {"type": "redirect", "return_url": "https://t.me/h24service_bot"},
         "description": "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢elegramMaster",
         "metadata": {'order_number': '1'},
         "receipt": {"customer": {"email": "zh.vitaliy92@yandex.ru"},
                     "items": [
                         {
                             "description": "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢elegramMaster",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                             "quantity": "1",
                             "amount": {"value": 1.00, "currency": "RUB"},  # –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞
                             "vat_code": "1"}]}})

    payment_data = json.loads(payment.json())
    payment_id = payment_data['id']
    payment_url = (payment_data['confirmation'])['confirmation_url']
    logger.info(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}, ID –æ–ø–ª–∞—Ç—ã {payment_id}")
    return payment_url, payment_id


@dp.callback_query(F.data.startswith("check_payment"))
async def check_payment(callback_query: types.CallbackQuery, state: FSMContext):
    split_data = callback_query.data.split("_")
    logger.info(split_data[2])
    # Check the payment status using the YooKassa API
    payment_info = Payment.find_one(split_data[2])
    logger.info(payment_info)
    product = "TelegramaMaster"
    # Process the payment status
    if payment_info.status == "succeeded":
        payment_status = "succeeded"
        date = payment_info.captured_at
        logger.info(date)
        conn = sqlite3.connect('setting/user_data.db')
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users_pay (user_id, first_name, last_name, username, payment_info,
                                                                product, date, payment_status)''')
        cursor.execute('''INSERT INTO users_pay (user_id, first_name, last_name, username, payment_info, 
                                                      product, date, payment_status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                       (callback_query.from_user.id,
                        callback_query.from_user.first_name,
                        callback_query.from_user.last_name,
                        callback_query.from_user.username, payment_info.id, product, date, payment_status))
        conn.commit()
        # –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        # document_path = "setting/password/Telegram_SMM_BOT/password.txt"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
        caption = (f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 1000 —Ä—É–± –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ‚ÄºÔ∏è \n\n"
                   f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É https://t.me/master_tg_d/286\n\n"
                   f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
        document = FSInputFile("setting/password/Telegram_SMM_BOT/password.txt")
        await bot.send_document(chat_id=callback_query.from_user.id, document=document, caption=caption)

        result = checking_for_presence_in_the_user_database(callback_query.from_user.id)

        if result is None:
            cursor.execute('INSERT INTO users (id) VALUES (?)', (callback_query.from_user.id,))
            conn.commit()

            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                               f"ID {callback_query.from_user.id},\n"
                                                               f"Username: @{callback_query.from_user.username},\n"
                                                               f"–ò–º—è: {callback_query.from_user.first_name},\n"
                                                               f"–§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name},\n\n"
                                                               f"–ü—Ä–∏–æ–±—Ä–µ–ª TelegramMaster")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(callback_query.message.chat.id, "Payment failed.")


def database(user_id):
    conn = sqlite3.connect('setting/user_data.db')
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫–∞–∑–∞
    cursor.execute("SELECT * FROM users_pay WHERE user_id=? AND payment_status=?", (user_id, "succeeded"))
    result = cursor.fetchone()
    return result


@dp.callback_query(F.data == "delivery")
async def buy(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    result = database(user_id)
    if result:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É
        # –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        document = FSInputFile('setting/password/Telegram_SMM_BOT/password.txt')
        caption = (f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É https://t.me/master_tg_d/292\n\n"
                   f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        await bot.send_document(chat_id=user_id, document=document, caption=caption)
    else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        url, payment = payment_yookassa()
        payment_keyboard_key = payment_keyboard(url, payment)
        payment_mes = ("–ö—É–ø–∏—Ç—å –¢elegramMaster. \n\n"
                       f"–¶–µ–Ω–∞ –Ω–∞ {current_date} ‚Äî 1000 —Ä—É–±–ª–µ–π.\n\n"
                       "–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ –±–æ—Ç –Ω–µ –≤—ã–¥–∞–ª –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–∏—Å–∞—Ç—å: "
                       "@PyAdminRU. ü§ñüîí\n\n"
                       "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ: /start")
        await bot.send_message(callback_query.message.chat.id, payment_mes, reply_markup=payment_keyboard_key)


def buy_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(buy)
    dp.message.register(check_payment)

