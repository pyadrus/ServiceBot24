import json
import sqlite3

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é loguru
from yookassa import Configuration, Payment

from handlers.payments.products_goods_services import payment_installation
from keyboards.pay_keyboards import purchasing_a_program_setup_service
from system.dispatcher import bot, dp, ACCOUNT_ID, SECRET_KEY, ADMIN_CHAT_ID


def payment_yookassa_program_setup_service():
    """–û–ø–ª–∞—Ç–∞ yookassa"""
    logger.info(f"ACCOUNT_ID: {ACCOUNT_ID}, SECRET_KEY {SECRET_KEY}")
    Configuration.account_id = ACCOUNT_ID
    Configuration.secret_key = SECRET_KEY

    payment = Payment.create(
        {"amount": {"value": payment_installation,  # –°—É–º–º–∞ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ü–û
                    "currency": "RUB"}, "capture": True,
         "confirmation": {"type": "redirect", "return_url": "https://t.me/h24service_bot"},
         "description": "–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)",
         "metadata": {'order_number': '1'},
         "receipt": {"customer": {"email": "zh.vitaliy92@yandex.ru"},
                     "items": [
                         {
                             "description": "–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                             "quantity": "1",
                             "amount": {"value": payment_installation,
                                        "currency": "RUB"},  # –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞
                             "vat_code": "1"}]}})

    payment_data = json.loads(payment.json())
    payment_id = payment_data['id']
    payment_url = (payment_data['confirmation'])['confirmation_url']
    logger.info(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}, ID –æ–ø–ª–∞—Ç—ã {payment_id}")
    return payment_url, payment_id


@dp.callback_query(F.data.startswith("check_service"))
async def check_payment_program_setup_service(callback_query: types.CallbackQuery, state: FSMContext):
    split_data = callback_query.data.split("_")
    logger.info(split_data[2])
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–º–æ—â—å—é API yookassa
    payment_info = Payment.find_one(split_data[2])
    logger.info(payment_info)
    product = "–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
    if payment_info.status == "succeeded":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_status = "succeeded"
        date = payment_info.captured_at
        logger.info(date)
        conn = sqlite3.connect('setting/user_data.db')
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users_pay (user_id, first_name, last_name, username,
                                                                payment_info, product, date, payment_status)''')
        cursor.execute('''INSERT INTO users_pay (user_id, first_name, last_name, username, payment_info, 
                                                      product, date, payment_status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                       (callback_query.from_user.id,
                        callback_query.from_user.first_name,
                        callback_query.from_user.last_name,
                        callback_query.from_user.username, payment_info.id, product, date, payment_status))
        conn.commit()

        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                           f"ID {callback_query.from_user.id},\n"
                                                           f"Username: @{callback_query.from_user.username},\n"
                                                           f"–ò–º—è: {callback_query.from_user.first_name},\n"
                                                           f"–§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name},\n\n"
                                                           f"–ü—Ä–∏–æ–±—Ä–µ–ª '–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)'")

        await bot.send_message(callback_query.from_user.id,
                               "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚ÄºÔ∏è \n–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ , —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                               " —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: @PyAdminRU. ü§ñüîí\n\n"
                               "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ: /start")
    else:
        await bot.send_message(callback_query.message.chat.id, "Payment failed.")


@dp.callback_query(F.data == "purchasing_a_program_setup_service")
async def buy_program_setup_service(callback_query: types.CallbackQuery):
    url, payment = payment_yookassa_program_setup_service()
    payment_keyboard_key = purchasing_a_program_setup_service(url, payment)
    payment_mes = ("–û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. \n\n"
                   "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è "
                   "—É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: @PyAdminRU. ü§ñüîí\n\n"
                   "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ: /start")
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=payment_mes,
                                reply_markup=payment_keyboard_key,
                                disable_web_page_preview=True)


def register_yookassa_training():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(buy_program_setup_service)
    dp.message.register(check_payment_program_setup_service)
