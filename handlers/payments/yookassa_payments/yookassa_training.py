# -*- coding: utf-8 -*-
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é loguru
from yookassa import Payment

from db.settings_db import save_payment_info
from handlers.payment_yookassa import payment_yookassa_com
from handlers.payments.products_goods_services import payment_installation
from messages.messages import message_payment
from system.dispatcher import bot, dp, ADMIN_CHAT_ID

product = "–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"


@dp.callback_query(F.data.startswith("payment_yookassa_training"))
async def payment_url_handler(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã TelegramMaster 2.0"""
    payment_url, payment_id = payment_yookassa_com(
        description_text=f"{product}",  # –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        product_price=payment_installation  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
    )
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É (–Æ–∫–∞—Å—Å–∞)', callback_data=f"csheck_service_{payment_id}")],
        [InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é', callback_data='start_menu_keyboard')],
    ])
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text=message_payment(product, payment_url),
                           reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query(F.data.startswith("csheck_service"))
async def check_payment_program_setup_service(callback_query: types.CallbackQuery, state: FSMContext):
    split_data = callback_query.data.split("_")
    logger.info(split_data[2])
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–º–æ—â—å—é API yookassa
    payment_info = Payment.find_one(split_data[2])
    logger.info(payment_info)
    if payment_info.status == "succeeded":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç –≤ —Ä—É–±–ª—è—Ö
        save_payment_info(callback_query.from_user.id, callback_query.from_user.first_name,
                          callback_query.from_user.last_name, callback_query.from_user.username, payment_info.id,
                          product, payment_info.captured_at, "succeeded")
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                           f"ID {callback_query.from_user.id},\n"
                                                           f"Username: @{callback_query.from_user.username},\n"
                                                           f"–ò–º—è: {callback_query.from_user.first_name},\n"
                                                           f"–§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name},\n\n"
                                                           f"–ü—Ä–∏–æ–±—Ä–µ–ª '–ü–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ü–û (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)'")
        await bot.send_message(callback_query.from_user.id,
                               "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚ÄºÔ∏è \n–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ , —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                               " —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: @PyAdminRU. ü§ñüîí\n\n"
                               "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ: /start")
    else:
        await bot.send_message(callback_query.message.chat.id, "Payment failed.")


def register_yookassa_training():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(check_payment_program_setup_service)
    dp.message.register(payment_url_handler)
