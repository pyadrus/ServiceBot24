# -*- coding: utf-8 -*-
import base64
import datetime  # –î–∞—Ç–∞
import hashlib
import json
import uuid

import aiohttp
from aiogram import types, F
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é loguru

from db.settings_db import save_payment_info, add_user_if_not_exists, is_user_in_db
from handlers.payments.products_goods_services import TelegramMaster_Commentator
from keyboards.user_keyboards import start_menu
from messages.messages import message_check_payment
from setting import settings
from system.dispatcher import bot, dp, ADMIN_CHAT_ID

# –û–ø–ª–∞—Ç–∞ TelegramMaster_Commentator
product = "TelegramMaster_Commentator"


async def make_request(url: str, invoice_data: dict):
    encoded_data = base64.b64encode(json.dumps(invoice_data).encode("utf-8")).decode("utf-8")
    signature = hashlib.md5(f"{encoded_data}{settings.CRYPTOMUS_API_KEY}".encode("utf-8")).hexdigest()

    async with aiohttp.ClientSession(headers={
        "merchant": settings.CRYPTOMUS_MERCHANT_ID,
        "sign": signature,
    }) as session:
        async with session.post(url=url, json=invoice_data) as response:
            if not response.ok:
                raise ValueError(response.reason)

            return await response.json()


@dp.callback_query(F.data == "payment_crypta_commentator")
async def payment_crypta_pas_program_handler_com(callback_query: types.CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ TelegramMaster_Commentator –∫—Ä–∏–ø—Ç–æ–π"""

    invoice_data = await make_request(
        url="https://api.cryptomus.com/v1/payment",
        invoice_data={
            "amount": f"{TelegramMaster_Commentator}",  # –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∑–∞ TelegramMaster_Commentator
            "currency": "RUB",
            "order_id": str(uuid.uuid4())
        },
    )
    logger.info(f"–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: {invoice_data}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    check_payment_button = InlineKeyboardButton(
        text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data=f"check_paymen_{invoice_data['result']['uuid']}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[check_payment_button]])

    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=f"üí≥ <b>–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b> üí≥\n\n"
                                f"üåê –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>TelegramMaster_Commentator</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                                f"üîó <a href='{invoice_data['result']['url']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n"
                                f"‚ö†Ô∏è <b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                                f"‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n\n"
                                f"üí° –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôå",
                           reply_markup=keyboard,
                           parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É TelegramMaster_Commentator"
@dp.callback_query(F.data.startswith("check_paymen"))
async def check_invoice_paid_program_com(callback_query: types.CallbackQuery):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice_uuid = callback_query.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID —Å—á–µ—Ç–∞ –∏–∑ callback_data
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ UUID: {invoice_uuid}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã

    try:
        invoice_data = await make_request(
            url="https://api.cryptomus.com/v1/payment/info",
            invoice_data={"uuid": invoice_uuid},
        )
        if invoice_data['result']['payment_status'] in ('paid', 'paid_over'):
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            invoice_json = json.dumps(invoice_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É JSON
            # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç –≤ –∫—Ä–∏–ø—Ç–µ
            save_payment_info(callback_query.from_user.id, callback_query.from_user.first_name,
                              callback_query.from_user.last_name, callback_query.from_user.username, invoice_json,
                              "TelegramMaster_Commentator", datetime.datetime.now().strftime("%Y-%m-%d"), "succeeded")
            await bot.send_document(chat_id=callback_query.from_user.id,
                                    document=FSInputFile("setting/password/TelegramMaster_Commentator/password.txt"),
                                    caption=message_check_payment(product_price=TelegramMaster_Commentator,
                                                                  product=product),
                                    reply_markup=start_menu()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                                    )
            result = is_user_in_db(callback_query.from_user.id)
            if result is None:
                add_user_if_not_exists(callback_query.from_user.id)
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                                                                   f"ID {callback_query.from_user.id},\n"
                                                                   f"Username: @{callback_query.from_user.username},\n"
                                                                   f"–ò–º—è: {callback_query.from_user.first_name},\n"
                                                                   f"–§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name},\n\n"
                                                                   f"–ü—Ä–∏–æ–±—Ä–µ–ª TelegramMaster_Commentator (–∫—Ä–∏–ø—Ç–æ–π)")
        else:
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="‚ùå –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –µ—â–µ —Ä–∞–∑."
            )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def register_cryptomus_program_com():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(payment_crypta_pas_program_handler_com)
